
function snap_waterway(waterway)
    -- 0 rotation for our waterway objects is looking at -z
    local rotation = normalize_angle(math.rad(waterway.getRotation()['y']))
    local pos = waterway.getPosition()
    local bounds = waterway.getBoundsNormalized()
    local scale = waterway.getScale()

    local h = bounds['size']['z'] / scale['z']
    local zpos = g_depth_table_in / 2 - (h / 2 - bounds['offset']['z'])
    local xpos = g_width_table_in / 2 - (h / 2 - bounds['offset']['z'])
    if g_is_double_dba then 
        xpos = xpos + g_width_table_in / 2
    end

    if (equals_float(rotation, 0, 0.17) or equals_float(rotation, 2*math.pi, 0.17))
        and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        and equals_float(pos['z'], zpos, g_max_camp_edge_snap)
        then

        waterway.setPosition({x=0, y=g_terrain_pos, z=zpos})
        waterway.setRotation({x=0, y=0, z=0})
        print_info('Waterway Snapping top')

    elseif equals_float(rotation, math.pi/2, 0.17)
        and equals_float(pos['x'], -xpos, g_max_camp_edge_snap)
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then

        waterway.setPosition({x=-xpos, y=g_terrain_pos, z=0})
        waterway.setRotation({x=0, y=270, z=0})
        print_info('Waterway Snapping left')

    elseif equals_float(rotation, math.pi, 0.17)
        and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        and equals_float(pos['z'], -zpos, g_max_camp_edge_snap)
        then
            
        waterway.setPosition({x=0, y=g_terrain_pos, z=-zpos})
        waterway.setRotation({x=0, y=180, z=0})
        print_info('Waterway Snapping bot')

    elseif equals_float(rotation, math.pi*3/2, 0.17)
        and equals_float(pos['x'], xpos, g_max_camp_edge_snap)
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then
            
        waterway.setPosition({x=xpos, y=g_terrain_pos, z=0})
        waterway.setRotation({x=0, y=90, z=0})
        print_info('Waterway Snapping right')

    else
        print_info('Waterway is not snapping')
    end
end

function snap_road(road)
    -- 0 rotation for our waterway objects is looking at -z
    local rotation = normalize_angle(math.rad(road.getRotation()['y']))
    local pos = road.getPosition()

    if (equals_float(rotation, 0, 0.17) 
        or equals_float(rotation, math.pi, 0.17)
        or equals_float(rotation, 2*math.pi, 0.17))
        and equals_float(pos['z'], 0, g_max_camp_edge_snap)
        then

        road.setPosition({x=pos['x'], y=g_terrain_pos, z=0})
        road.setRotation({x=0, y=0, z=0})
        print_info('Road Snapping Vertical')

    elseif (equals_float(rotation, math.pi/2, 0.17) 
            or equals_float(rotation, 3*math.pi/2, 0.17))
            and equals_float(pos['x'], 0, g_max_camp_edge_snap)
        then

        road.setPosition({x=0, y=g_terrain_pos, z=pos['z']})
        road.setRotation({x=0, y=90, z=0})
        print_info('Road Snapping Horizontal')

    else
        print_info('Road is not snapping')
    end
end

function change_texture_terrain(terrain_obj, new_tex_url)
    local custom = terrain_obj.getCustomObject()
    custom['diffuse'] = new_tex_url
    terrain_obj.setCustomObject(custom)
end

function set_forest(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['forest']
    local multiplier = options['multiplier']
    local ntrees = math.floor((terrain_size['x'] + terrain_size['z'])*multiplier)
    for i=1,ntrees do
        local point = random_point_ellipse(terrain_size['x'] / 2.5, terrain_size['z'] / 2.5)
        new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
        local obj = spawn_model(random_element(options['objects']), new_pos, math.random(1, 359), minimal_collider, true)
        terrain_obj.addAttachment(obj)
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function set_arid(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['rough']
    local nobjs = math.floor((terrain_size['x'] + terrain_size['z'])*2)
    for i=1,nobjs do
        local point = random_point_ellipse(terrain_size['x'] / 2.5, terrain_size['z'] / 2.5)
        new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
        local obj = spawn_model(random_element(options['objects']), new_pos, math.random(1, 359), minimal_collider, true)
        terrain_obj.addAttachment(obj)
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function set_oasis(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['oasis']
    local nobjs = math.floor((terrain_size['x'] + terrain_size['z'])*1.2)
    for i=1,nobjs do
        local point = random_point_ellipse(terrain_size['x'] / 4, terrain_size['z'] / 4,
            math.min(terrain_size['x'] / 4, terrain_size['z'] / 4) - 0.3)

        new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
        local obj = spawn_model(random_element(options['objects']), new_pos, math.random(1, 359), minimal_collider, true)
        terrain_obj.addAttachment(obj)
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function set_marsh(terrain_obj, terrain_pos, terrain_rotation, terrain_size, table_type)
    local options = g_terrain[table_type]['marsh']
    local nobjs = math.floor((terrain_size['x'] + terrain_size['z'])*1.2)
    for i=1,nobjs do
        local point = random_point_ellipse(terrain_size['x'] / 4, terrain_size['z'] / 4,
            math.min(terrain_size['x'] / 4, terrain_size['z'] / 4) - 0.3)

        new_pos = rotate_point_relative(point, terrain_pos, terrain_rotation)
        local obj = spawn_model(random_element(options['objects']), new_pos, math.random(1, 359), minimal_collider, true)
        terrain_obj.addAttachment(obj)
    end
    change_texture_terrain(terrain_obj, random_element(options['texture']))
end

function process_vegetation(terrain_obj, type)
    local terrain_pos = terrain_obj.getPosition()
    local terrain_rotation = normalize_angle(math.rad(terrain_obj.getRotation()['y']))
    local terrain_size = terrain_obj.getBoundsNormalized()['size']
    if str_starts_with(terrain_obj.getName(), 'terrain Forest') then
        set_forest(terrain_obj, terrain_pos, terrain_rotation, terrain_size, type)
    end
    if str_starts_with(terrain_obj.getName(), 'terrain Arid') then
        set_arid(terrain_obj, terrain_pos, terrain_rotation, terrain_size, type)
    end
    if str_starts_with(terrain_obj.getName(), 'terrain Oasis') then
        set_oasis(terrain_obj, terrain_pos, terrain_rotation, terrain_size, type)
    end
    if str_starts_with(terrain_obj.getName(), 'terrain Marsh') then
        set_marsh(terrain_obj, terrain_pos, terrain_rotation, terrain_size, type)
    end
end

function fix_terrain_and_lock()
    local all_objs = getAllObjects()
    local terrains = {}
    for _,obj in ipairs(all_objs) do
        local name = obj.getName()
        if str_starts_with(name, 'terrain') then
            table.insert(terrains, obj)
        end
    end

    local gametable = getObjectFromGUID(g_current_table)
    local size = gametable.getBoundsNormalized()['size']
    local max_distance_from_table_sq = (size['x']/2)^2 + (size['z'] / 2)^2
    local pos_table = gametable.getPosition()

    local terrain_type = from_toggle_number_to_table_type(g_current_table_type)

    gametable.setLock(false)
    for _,terrain in ipairs(terrains) do
        local terrain_pos = terrain.getPosition()
        local distance = distance_points_flat_sq(pos_table, terrain_pos)
        if distance <= max_distance_from_table_sq
            and pos_table['y'] < terrain_pos['y'] then

            print_debug('Found terrain with name ' .. terrain.getName())

            if g_use_3d_terrain then
                process_vegetation(terrain, terrain_type)
            end

            gametable.addAttachment(terrain)
            print_info('Attaching ' .. terrain.getName())
        end
    end
    Wait.frames(function()
        g_current_table = gametable.getGUID()
        gametable.setRotation({ x = 0, y = 0, z = 0})
        gametable.setPosition({ x = 0, y = g_base_height_tabletop, z = 0})
        gametable.setLock(true)
        print_important('Table is now locked')
    end, 1)
end

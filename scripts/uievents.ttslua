-- Global number of paces moved
g_paces_movement = 100

-- Updates the global that manages the number of paces moved by the other functions, and updates the UI
function slider_paces_changed(player, value, id)
    g_paces_movement = round_to_power(value, 1)

    -- It's undocumented, but changing the value of the button does not update the button_move_forward
    -- Instead we have to change the undocumented text attribute. However, we still, need to
    UI.setAttribute('button_move_forward', 'text', 'Move ' .. g_paces_movement .. ' paces')
    UI.setValue('button_move_forward', 'Move ' .. g_paces_movement .. ' paces')
end

function move_bases(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    if tlen(objs) < 1 then
        print_error(player.steam_name ..' is trying to move 100 paces, but (s)he has no object selected, ignoring')
    return
    end

    for k,obj in ipairs(objs) do
        local moved_paces = move_base(obj, g_paces_movement)
        print_info(player.steam_name .. ' is moving ' .. obj.getName() .. ' ' .. moved_paces .. ' paces forward')
    end
end

function align_bases(player, value, id)
    local objs = filter_bases(player.getSelectedObjects())
    local n_objs = tlen(objs)
    if n_objs < 2 then
        print_error(player.steam_name ..' is trying to align ' .. n_objs .. ' bases, which is not supported')
        return
    end
    table.sort(objs, function(l, r)
        return l.getPosition()['x'] < r.getPosition()['x']
    end)

    for i=1,n_objs-1 do
        align_two_bases(player, objs[i], objs[i + 1])
    end
end

function create_army_player_blue()
    local army = armies['Book_IV']['Example']
    spawn_army(army, false)
end

function update_book_menu(book_selected)
    local options = {}
    for book_name, book_armies in pairs(armies) do
        table.insert(options, dataname_to_friendlyname(book_name))
    end
    set_options_dropdown_by_id('dropdown_book', options, book_selected) 
end

function update_armies_menu(book, army_selected)
    local options = {}
    for army_name,_ in pairs(book) do
        table.insert(options, dataname_to_friendlyname(army_name))
    end
    set_options_dropdown_by_id('dropdown_army', options, army_selected) 
end

function dataname_to_friendlyname(dataname)
    local friendly_name,_ = dataname:gsub("_", " ")
    return friendly_name
end

function friendlyname_to_dataname(friendly_name)
    local dataname,_ = friendly_name:gsub(" ", "_")
    return dataname
end

function create_army_options_menu()
    local status = UI.getAttribute('panel_dba_troop_selection', 'active')
    if status == "True" then
        -- Ignore, the user is clicking despite the menu already being there
        return
    end
    update_book_menu(1)
    on_next_frame(function()
        update_armies_menu(armies['Book_I'], 1)
        on_next_frame(function()
            UI.setAttribute('panel_dba_troop_selection', 'active', true)
        end)
    end)
end

function on_book_selected(player, value, id)
    local new_book_name = friendlyname_to_dataname(value)
    local i = 1
    local selected_book_index = 1
    for book_name, book_armies in pairs(armies) do
        if book_name == new_book_name then
            selected_book_index = i
        end
        i = i + 1
    end

    on_next_frame(function()
        update_book_menu(selected_book_index)
        on_next_frame(function()
            update_armies_menu(armies[new_book_name], 1)
        end)
    end)
end

function add_pip(player, value, id)
    if value == 'red' then
        local pips_red = UI.getValue('text_pips_player_red')
        pips_red = pips_red + 1
        UI.setValue('text_pips_player_red', pips_red)
    else
        local pips_blue = UI.getValue('text_pips_player_blue')
        pips_blue = pips_blue + 1
        UI.setValue('text_pips_player_blue', pips_blue)
    end
end

function remove_pip(player, value, id)
    if value == 'red' then
        local pips_red = UI.getValue('text_pips_player_red')
        pips_red = pips_red - 1
        UI.setValue('text_pips_player_red', pips_red)
    else
        local pips_blue = UI.getValue('text_pips_player_blue')
        pips_blue = pips_blue - 1
        UI.setValue('text_pips_player_blue', pips_blue)
    end
end